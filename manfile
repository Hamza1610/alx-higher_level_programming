PYTHON(1General Commands ManuPYTHON(1)

NAME
       python - an interpreted, inter‐
       active,  object-oriented   pro‐
       gramming language

SYNOPSIS
       python  [  -B ] [ -b ] [ -d ] [
       -E ] [ -h ] [ -i ] [ -I ]
              [ -m module-name ] [  -q
       ]  [ -O ] [ -OO ] [ -s ] [ -S ]
       [ -u ]
              [ -v ] [ -V ] [ -W argu‐
       ment  ]  [ -x ] [ [ -X option ]
       -?  ]
              [    --check-hash-based-
       pycs default | always | never ]
              [  -c command | script |
       - ] [ arguments ]

DESCRIPTION
       Python is an  interpreted,  in‐
       teractive, object-oriented pro‐
       gramming language that combines
       remarkable   power   with  very
       clear syntax.  For an introduc‐
       tion  to programming in Python,
       see the Python  Tutorial.   The
       Python  Library Reference docu‐
       ments  built-in  and   standard
       types, constants, functions and
       modules.  Finally,  the  Python
       Reference  Manual describes the
       syntax  and  semantics  of  the
       core  language in (perhaps too)
       much detail.  (These  documents
       may be located via the INTERNET
       RESOURCES below;  they  may  be
       installed  on  your  system  as
       well.)

       Python's basic power can be ex‐
       tended  with  your  own modules
       written in C or C++.   On  most
       systems such modules may be dy‐
       namically  loaded.   Python  is
       also  adaptable as an extension
       language for existing  applica‐
       tions.   See the internal docu‐
       mentation for hints.

       Documentation   for   installed
       Python modules and packages can
       be viewed by running the  pydoc
       program.

COMMAND LINE OPTIONS
       -B     Don't  write  .pyc files
              on  import.   See   also
              PYTHONDONTWRITEBYTECODE.

       -b     Issue   warnings   about
              str(bytes_instance),
              str(bytearray_instance)
              and            comparing
              bytes/bytearray     with
              str. (-bb: issue errors)

       -c command
              Specify the  command  to
              execute  (see  next sec‐
              tion).  This  terminates
              the option list (follow‐
              ing options  are  passed
              as arguments to the com‐
              mand).

       --check-hash-based-pycs mode
              Configure   how   Python
              evaluates   the   up-to-
              dateness  of  hash-based
              .pyc files.

       -d     Turn on parser debugging
              output (for expert only,
              depending on compilation
              options).

       -E     Ignore environment vari‐
              ables   like  PYTHONPATH
              and PYTHONHOME that mod‐
              ify  the behavior of the
              interpreter.

       -h ,  -? ,  --help
              Prints the usage for the
              interpreter   executable
              and exits.

       -i     When a script is  passed
              as first argument or the
              -c option is used, enter
              interactive  mode  after
              executing the script  or
              the  command.   It  does
              not  read  the  $PYTHON‐
              STARTUP  file.  This can
              be  useful  to   inspect
              global  variables  or  a
              stack   trace   when   a
              script  raises an excep‐
              tion.

       -I     Run Python  in  isolated
              mode.  This also implies
              -E and -s.  In  isolated
              mode  sys.path  contains
              neither the script's di‐
              rectory  nor  the user's
              site-packages directory.
              All  PYTHON* environment
              variables  are  ignored,
              too.   Further  restric‐
              tions may be imposed  to
              prevent  the  user  from
              injecting      malicious
              code.

       -m module-name
              Searches   sys.path  for
              the  named  module   and
              runs  the  corresponding
              .py file as a script.

       -O     Remove assert statements
              and any code conditional
              on the  value  of  __de‐
              bug__; augment the file‐
              name for compiled (byte‐
              code)  files  by  adding
              .opt-1 before  the  .pyc
              extension.

       -OO    Do  -O  and also discard
              docstrings;  change  the
              filename   for  compiled
              (bytecode)   files    by
              adding .opt-2 before the
              .pyc extension.

       -q     Do not print the version
              and  copyright messages.
              These messages are  also
              suppressed in non-inter‐
              active mode.

       -s     Don't add user site  di‐
              rectory to sys.path.

       -S     Disable  the  import  of
              the module site and  the
              site-dependent manipula‐
              tions of  sys.path  that
              it  entails.   Also dis‐
              able these manipulations
              if  site  is  explicitly
              imported later.

       -u     Force  the  stdout   and
              stderr streams to be un‐
              buffered.   This  option
              has  no  effect  on  the
              stdin stream.

       -v     Print  a  message   each
              time  a  module  is ini‐
              tialized,  showing   the
              place    (filename    or
              built-in  module)   from
              which   it   is  loaded.
              When given twice,  print
              a  message for each file
              that is checked for when
              searching  for a module.
              Also  provides  informa‐
              tion  on  module cleanup
              at exit.

       -V ,  --version
              Prints the  Python  ver‐
              sion  number of the exe‐
              cutable and exits.  When
              given  twice, print more
              information  about   the
              build.

       -W argument
              Warning control.  Python
              sometimes prints warning
              message  to  sys.stderr.
              A typical  warning  mes‐
              sage  has  the following
              form:  file:line:  cate‐
              gory:  message.   By de‐
              fault, each  warning  is
              printed  once  for  each
              source line where it oc‐
              curs.   This option con‐
              trols how often warnings
              are  printed.   Multiple
              -W options may be given;
              when  a  warning matches
              more  than  one  option,
              the  action for the last
              matching option is  per‐
              formed.   Invalid -W op‐
              tions  are  ignored   (a
              warning    message    is
              printed  about   invalid
              options  when  the first
              warning   is    issued).
              Warnings   can  also  be
              controlled from within a
              Python program using the
              warnings module.

              The simplest form of ar‐
              gument  is  one  of  the
              following action strings
              (or  a  unique abbrevia‐
              tion): ignore to  ignore
              all warnings; default to
              explicitly  request  the
              default behavior (print‐
              ing  each  warning  once
              per source line); all to
              print  a  warning   each
              time it occurs (this may
              generate  many  messages
              if  a  warning  is trig‐
              gered repeatedly for the
              same  source  line, such
              as inside a loop);  mod‐
              ule  to print each warn‐
              ing only the first  time
              it  occurs  in each mod‐
              ule; once to print  each
              warning  only  the first
              time it  occurs  in  the
              program;   or  error  to
              raise an  exception  in‐
              stead   of   printing  a
              warning message.

              The full form  of  argu‐
              ment    is   action:mes‐
              sage:cate‐
              gory:module:line.  Here,
              action is  as  explained
              above  but  only applies
              to messages  that  match
              the   remaining  fields.
              Empty fields  match  all
              values;  trailing  empty
              fields may  be  omitted.
              The     message    field
              matches the start of the
              warning message printed;
              this match  is  case-in‐
              sensitive.  The category
              field matches the  warn‐
              ing category.  This must
              be  a  class  name;  the
              match  test  whether the
              actual warning  category
              of the message is a sub‐
              class of  the  specified
              warning  category.   The
              full class name must  be
              given.  The module field
              matches the (fully-qual‐
              ified) module name; this
              match is case-sensitive.
              The  line  field matches
              the line  number,  where
              zero  matches  all  line
              numbers  and   is   thus
              equivalent to an omitted
              line number.

       -X option
              Set implementation  spe‐
              cific  option.  The fol‐
              lowing    options    are
              available:

                  -X faulthandler: en‐
              able faulthandler

                  -X     showrefcount:
              output  the total refer‐
              ence count and number of
              used
                      memory    blocks
              when  the  program  fin‐
              ishes   or   after  each
              statement in the
                      interactive  in‐
              terpreter.   This   only
              works on debug builds

                  -X      tracemalloc:
              start   tracing   Python
              memory allocations using
              the
                      tracemalloc mod‐
              ule.  By  default,  only
              the most recent frame is
              stored in a
                      traceback  of  a
              trace.  Use -X tracemal‐
              loc=NFRAME   to    start
              tracing with a
                      traceback  limit
              of NFRAME frames

                  -X   showalloccount:
              output  the  total count
              of allocated objects for
              each
                      type   when  the
              program  finishes.  This
              only  works  when Python
              was built with
                      COUNT_ALLOCS de‐
              fined

                  -X  importtime: show
              how  long  each   import
              takes.  It  shows module
              name,
                      cumulative  time
              (including   nested  im‐
              ports)  and  self   time
              (excluding
                      nested imports).
              Note that its output may
              be   broken   in  multi-
              threaded
                      application.
              Typical usage is python3
              -X importtime -c 'import
              asyncio'

                  -X    dev:    enable
              CPython's   "development
              mode", introducing addi‐
              tional runtime
                      checks which are
              too  expensive to be en‐
              abled  by  default.   It
              will not be
                      more     verbose
              than the default if  the
              code   is  correct:  new
              warnings are
                      only     emitted
              when  an  issue  is  de‐
              tected.  Effect  of  the
              developer mode:
                         * Add default
              warning  filter,  as  -W
              default
                         * Install de‐
              bug hooks on memory  al‐
              locators:     see    the
              PyMem_SetupDebugHooks()
              C function
                         *  Enable the
              faulthandler  module  to
              dump  the  Python trace‐
              back on a crash
                         *      Enable
              asyncio debug mode
                         *   Set   the
              dev_mode  attribute   of
              sys.flags to True
                         *   io.IOBase
              destructor logs  close()
              exceptions

                  -X    utf8:   enable
              UTF-8 mode for operating
              system interfaces, over‐
              riding the default
                      locale-aware
              mode.  -X utf8=0 explic‐
              itly disables UTF-8 mode
              (even when it would
                      otherwise  acti‐
              vate automatically). See
              PYTHONUTF8  for more de‐
              tails

                  -X      pycache_pre‐
              fix=PATH: enable writing
              .pyc files to a parallel
              tree rooted at the
                       given directory
              instead of to  the  code
              tree.

       -x     Skip  the  first line of
              the source.  This is in‐
              tended  for  a  DOS spe‐
              cific hack only.   Warn‐
              ing: the line numbers in
              error messages  will  be
              off by one!

INTERPRETER INTERFACE
       The  interpreter  interface re‐
       sembles that of the UNIX shell:
       when called with standard input
       connected to a tty  device,  it
       prompts  for  commands and exe‐
       cutes  them  until  an  EOF  is
       read;  when  called with a file
       name argument or with a file as
       standard  input,  it  reads and
       executes  a  script  from  that
       file;  when called with -c com‐
       mand, it  executes  the  Python
       statement(s)  given as command.
       Here command may contain multi‐
       ple   statements  separated  by
       newlines.   Leading  whitespace
       is significant in Python state‐
       ments!    In    non-interactive
       mode,   the   entire  input  is
       parsed before it is executed.

       If available, the  script  name
       and additional arguments there‐
       after are passed to the  script
       in    the    Python    variable
       sys.argv, which is  a  list  of
       strings  (you must first import
       sys to be able to  access  it).
       If  no  script  name  is given,
       sys.argv[0] is an empty string;
       if -c is used, sys.argv[0] con‐
       tains the  string  '-c'.   Note
       that options interpreted by the
       Python interpreter  itself  are
       not placed in sys.argv.

       In  interactive  mode, the pri‐
       mary prompt is `>>>'; the  sec‐
       ond  prompt (which appears when
       a command is not  complete)  is
       `...'.    The  prompts  can  be
       changed   by   assignment    to
       sys.ps1 or sys.ps2.  The inter‐
       preter quits when it  reads  an
       EOF  at  a prompt.  When an un‐
       handled  exception  occurs,   a
       stack trace is printed and con‐
       trol  returns  to  the  primary
       prompt;    in   non-interactive
       mode, the interpreter exits af‐
       ter  printing  the stack trace.
       The interrupt signal raises the
       KeyboardInterrupt    exception;
       other  UNIX  signals  are   not
       caught  (except that SIGPIPE is
       sometimes ignored, in favor  of
       the  IOError exception).  Error
       messages are written to stderr.

FILES AND DIRECTORIES
       These are subject to difference
       depending on local installation
       conventions;   ${prefix}    and
       ${exec_prefix}   are  installa‐
       tion-dependent  and  should  be
       interpreted  as  for  GNU soft‐
       ware; they may be the same.  On
       Debian GNU/{Hurd,Linux} the de‐
       fault for both is /usr.

       ${exec_prefix}/bin/python
              Recommended location  of
              the interpreter.

       ${prefix}/lib/python<version>
       ${exec_prefix}/lib/python<ver‐
       sion>
              Recommended locations of
              the directories contain‐
              ing  the  standard  mod‐
              ules.

       ${prefix}/include/python<ver‐
       sion>
       ${exec_prefix}/in‐
       clude/python<version>
              Recommended locations of
              the directories contain‐
              ing  the  include  files
              needed  for   developing
              Python   extensions  and
              embedding   the   inter‐
              preter.

ENVIRONMENT VARIABLES
       PYTHONHOME
              Change  the  location of
              the standard Python  li‐
              braries.    By  default,
              the    libraries     are
              searched    in    ${pre‐
              fix}/lib/python<version>
              and          ${exec_pre‐
              fix}/lib/python<ver‐
              sion>,  where  ${prefix}
              and  ${exec_prefix}  are
              installation-dependent
              directories,  both   de‐
              faulting  to /usr/local.
              When $PYTHONHOME is  set
              to  a  single directory,
              its value replaces  both
              ${prefix}            and
              ${exec_prefix}.       To
              specify different values
              for these, set  $PYTHON‐
              HOME      to      ${pre‐
              fix}:${exec_prefix}.

       PYTHONPATH
              Augments   the   default
              search  path  for module
              files.   The  format  is
              the  same as the shell's
              $PATH: one or  more  di‐
              rectory  pathnames sepa‐
              rated by  colons.   Non-
              existent directories are
              silently  ignored.   The
              default  search  path is
              installation  dependent,
              but   generally   begins
              with              ${pre‐
              fix}/lib/python<version>
              (see PYTHONHOME  above).
              The  default search path
              is  always  appended  to
              $PYTHONPATH.     If    a
              script    argument    is
              given,   the   directory
              containing the script is
              inserted  in the path in
              front  of   $PYTHONPATH.
              The  search  path can be
              manipulated from  within
              a  Python program as the
              variable sys.path.

       PYTHONSTARTUP
              If this is the name of a
              readable    file,    the
              Python commands in  that
              file are executed before
              the first prompt is dis‐
              played   in  interactive
              mode.  The file is  exe‐
              cuted  in  the same name
              space where  interactive
              commands are executed so
              that objects defined  or
              imported  in  it  can be
              used without  qualifica‐
              tion  in the interactive
              session.  You  can  also
              change    the    prompts
              sys.ps1 and  sys.ps2  in
              this file.

       PYTHONOPTIMIZE
              If this is set to a non-
              empty   string   it   is
              equivalent to specifying
              the -O option. If set to
              an integer, it is equiv‐
              alent to  specifying  -O
              multiple times.

       PYTHONDEBUG
              If this is set to a non-
              empty   string   it   is
              equivalent to specifying
              the -d option. If set to
              an integer, it is equiv‐
              alent to  specifying  -d
              multiple times.

       PYTHONDONTWRITEBYTECODE
              If this is set to a non-
              empty   string   it   is
              equivalent to specifying
              the -B option (don't try
              to write .pyc files).

       PYTHONINSPECT
              If this is set to a non-
              empty   string   it   is
              equivalent to specifying
              the -i option.

       PYTHONIOENCODING
              If this  is  set  before
              running the interpreter,
              it overrides the  encod‐
              ing  used for stdin/std‐
              out/stderr, in the  syn‐
              tax     encodingname:er‐
              rorhandler The errorhan‐
              dler  part  is  optional
              and has the same meaning
              as  in  str.encode.  For
              stderr, the errorhandler
               part  is  ignored;  the
              handler  will  always be
              ´backslashreplace´.

       PYTHONNOUSERSITE
              If this is set to a non-
              empty   string   it   is
              equivalent to specifying
              the -s option (Don't add
              the user site  directory
              to sys.path).

       PYTHONUNBUFFERED
              If this is set to a non-
              empty   string   it   is
              equivalent to specifying
              the -u option.

       PYTHONVERBOSE
              If this is set to a non-
              empty   string   it   is
              equivalent to specifying
              the -v option. If set to
              an integer, it is equiv‐
              alent  to  specifying -v
              multiple times.

       PYTHONWARNINGS
              If  this  is  set  to  a
              comma-separated   string
              it  is   equivalent   to
              specifying the -W option
              for each separate value.

       PYTHONHASHSEED
              If this variable is  set
              to  "random",  a  random
              value is  used  to  seed
              the  hashes  of  str and
              bytes objects.

              If PYTHONHASHSEED is set
              to  an integer value, it
              is used as a fixed  seed
              for    generating    the
              hash() of the types cov‐
              ered by the hash random‐
              ization.  Its purpose is
              to    allow   repeatable
              hashing,  such  as   for
              selftests for the inter‐
              preter itself, or to al‐
              low  a cluster of python
              processes to share  hash
              values.

              The  integer  must  be a
              decimal  number  in  the
              range    [0,4294967295].
              Specifying the  value  0
              will  disable  hash ran‐
              domization.

       PYTHONMALLOC
              Set  the  Python  memory
              allocators   and/or  in‐
              stall debug  hooks.  The
              available memory alloca‐
              tors are malloc and  py‐
              malloc.   The  available
              debug hooks  are  debug,
              malloc_debug, and pymal‐
              loc_debug.

              When Python is  compiled
              in  debug  mode, the de‐
              fault is  pymalloc_debug
              and  the debug hooks are
              automatically used. Oth‐
              erwise,  the  default is
              pymalloc.

       PYTHONMALLOCSTATS
              If set  to  a  non-empty
              string,    Python   will
              print statistics of  the
              pymalloc  memory alloca‐
              tor every time a new py‐
              malloc  object  arena is
              created,  and  on  shut‐
              down.

              This variable is ignored
              if the $PYTHONMALLOC en‐
              vironment   variable  is
              used to force  the  mal‐
              loc(3)  allocator of the
              C library, or if  Python
              is   configured  without
              pymalloc support.

       PYTHONASYNCIODEBUG
              If   this    environment
              variable  is  set  to  a
              non-empty string, enable
              the  debug  mode  of the
              asyncio module.

       PYTHONTRACEMALLOC
              If   this    environment
              variable  is  set  to  a
              non-empty string,  start
              tracing   Python  memory
              allocations  using   the
              tracemalloc module.

              The  value  of the vari‐
              able is the maximum num‐
              ber  of frames stored in
              a traceback of a  trace.
              For   example,   PYTHON‐
              TRACEMALLOC=1     stores
              only   the  most  recent
              frame.

       PYTHONFAULTHANDLER
              If   this    environment
              variable  is  set  to  a
              non-empty string, fault‐
              handler.enable()      is
              called at  startup:  in‐
              stall   a   handler  for
              SIGSEGV,  SIGFPE,  SIGA‐
              BRT,  SIGBUS  and SIGILL
              signals  to   dump   the
              Python traceback.

              This  is  equivalent  to
              the -X faulthandler  op‐
              tion.

       PYTHONEXECUTABLE
              If    this   environment
              variable     is     set,
              sys.argv[0]  will be set
              to its value instead  of
              the  value  got  through
              the  C   runtime.   Only
              works on Mac OS X.

       PYTHONUSERBASE
              Defines  the  user  base
              directory, which is used
              to  compute  the path of
              the  user  site-packages
              directory  and Distutils
              installation  paths  for
              python  setup.py install
              --user.

       PYTHONPROFILEIMPORTTIME
              If   this    environment
              variable  is  set  to  a
              non-empty string, Python
              will  show how long each
              import  takes.  This  is
              exactly   equivalent  to
              setting -X importtime on
              the command line.

       PYTHONBREAKPOINT
              If    this   environment
              variable is set to 0, it
              disables the default de‐
              bugger. It can be set to
              the callable of your de‐
              bugger of choice.

   Debug-mode variables
       Setting  these  variables  only
       has  an effect in a debug build
       of Python, that is,  if  Python
       was configured with the --with-
       pydebug build option.

       PYTHONTHREADDEBUG
              If   this    environment
              variable  is set, Python
              will print threading de‐
              bug info.

       PYTHONDUMPREFS
              If    this   environment
              variable is set,  Python
              will  dump  objects  and
              reference  counts  still
              alive   after   shutting
              down the interpreter.

AUTHOR
       The Python Software Foundation:
       https://www.python.org/psf/

INTERNET RESOURCES
       Main                   website:
       https://www.python.org/
       Documentation:
       https://docs.python.org/
       Developer            resources:
       https://devguide.python.org/
       Downloads:
       https://www.python.org/down‐
       loads/
       Module              repository:
       https://pypi.org/
       Newsgroups:   comp.lang.python,
       comp.lang.python.announce

LICENSING
       Python is distributed under  an
       Open  Source  license.  See the
       file "LICENSE"  in  the  Python
       source  distribution for infor‐
       mation on  terms  &  conditions
       for accessing and otherwise us‐
       ing Python and for a DISCLAIMER
       OF ALL WARRANTIES.

                             PYTHON(1)
